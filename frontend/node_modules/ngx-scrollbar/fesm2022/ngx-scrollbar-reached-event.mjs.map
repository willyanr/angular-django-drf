{"version":3,"file":"ngx-scrollbar-reached-event.mjs","sources":["../../../projects/ngx-scrollbar/reached-event/src/ng-scrollbar-reached.ts","../../../projects/ngx-scrollbar/reached-event/src/ng-scrollbar-reached.module.ts","../../../projects/ngx-scrollbar/reached-event/src/ngx-scrollbar-reached-event.ts"],"sourcesContent":["import { isPlatformBrowser } from '@angular/common';\r\nimport {\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  OnInit,\r\n  OnDestroy,\r\n  NgZone,\r\n  Renderer2,\r\n  WritableSignal,\r\n  Injector,\r\n  inject,\r\n  signal,\r\n  effect,\r\n  numberAttribute,\r\n  booleanAttribute,\r\n  runInInjectionContext,\r\n  EventEmitter,\r\n  PLATFORM_ID\r\n} from '@angular/core';\r\nimport { _NgScrollbar, NG_SCROLLBAR } from 'ngx-scrollbar';\r\n\r\ntype ReachedEventAction = {\r\n  emit: () => void;\r\n}\r\n\r\n@Directive({\r\n  selector: 'ng-scrollbar[reachedTop], ng-scrollbar[reachedBottom], ng-scrollbar[reachedStart], ng-scrollbar[reachedEnd]',\r\n  standalone: true,\r\n})\r\nexport class NgScrollbarReached implements OnInit, OnDestroy {\r\n\r\n  private readonly isBrowser: boolean = isPlatformBrowser(inject(PLATFORM_ID));\r\n\r\n  private readonly zone: NgZone = inject(NgZone);\r\n\r\n  private readonly renderer: Renderer2 = inject(Renderer2);\r\n\r\n  private readonly injector: Injector = inject(Injector);\r\n\r\n  private readonly scrollbar: _NgScrollbar = inject(NG_SCROLLBAR);\r\n\r\n  private readonly disabled: WritableSignal<boolean> = signal(false);\r\n\r\n  /** An array that contains all trigger elements  **/\r\n  private triggerElements: HTMLElement[] = [];\r\n\r\n  /** The intersection observer reference */\r\n  private intersectionObserver: IntersectionObserver;\r\n\r\n  /** An array that contains the chosen outputs */\r\n  private subscribedEvents: string[] = [];\r\n\r\n  /** The scrollbars element that contains the trigger elements */\r\n  private triggerElementsWrapper: HTMLElement;\r\n\r\n  /** Reached offset value in px */\r\n  @Input({ alias: 'reachedOffset', transform: numberAttribute }) set offsetSetter(value: number) {\r\n    this.setCssVariable('--reached-offset', value);\r\n  }\r\n\r\n  @Input({ alias: 'reachedTopOffset', transform: numberAttribute }) set offsetTopSetter(value: number) {\r\n    this.setCssVariable('--reached-offset-top', value);\r\n  }\r\n\r\n  @Input({ alias: 'reachedBottomOffset', transform: numberAttribute }) set offsetBottomSetter(value: number) {\r\n    this.setCssVariable('--reached-offset-bottom', value);\r\n  }\r\n\r\n  @Input({ alias: 'reachedStartOffset', transform: numberAttribute }) set offsetStartSetter(value: number) {\r\n    this.setCssVariable('--reached-offset-start', value);\r\n  }\r\n\r\n  @Input({ alias: 'reachedEndOffset', transform: numberAttribute }) set offsetEndSetter(value: number) {\r\n    this.setCssVariable('--reached-offset-end', value);\r\n  }\r\n\r\n  @Input({ alias: 'disableReached', transform: booleanAttribute })\r\n  set disableReachedSetter(value: boolean) {\r\n    this.disabled.set(value);\r\n  }\r\n\r\n  @Output() reachedTop: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() reachedBottom: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() reachedStart: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() reachedEnd: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** A mapper function to ease forwarding the intersected element to its proper output */\r\n  readonly reachedEventActions: Record<string, ReachedEventAction> = {\r\n    top: { emit: (): void => this.scrollbar.isVerticallyScrollable() ? this.reachedTop.emit() : null },\r\n    bottom: { emit: (): void => this.scrollbar.isVerticallyScrollable() ? this.reachedBottom.emit() : null },\r\n    start: { emit: (): void => this.scrollbar.isHorizontallyScrollable() ? this.reachedStart.emit() : null },\r\n    end: { emit: (): void => this.scrollbar.isHorizontallyScrollable() ? this.reachedEnd.emit() : null }\r\n  };\r\n\r\n  private onReached(trigger: string): void {\r\n    if (trigger) {\r\n      this.reachedEventActions[trigger]?.emit();\r\n    }\r\n  }\r\n\r\n  private activate(): void {\r\n    this.zone.runOutsideAngular(() => {\r\n      // Create the scrollbars element inside the viewport\r\n      this.triggerElementsWrapper = this.renderer.createElement('div');\r\n      this.renderer.addClass(this.triggerElementsWrapper, 'ng-scroll-reached-wrapper');\r\n      this.renderer.appendChild(this.scrollbar.viewport.contentWrapperElement, this.triggerElementsWrapper);\r\n\r\n      // Create a trigger element for each subscribed event\r\n      this.subscribedEvents.forEach((event: string) => {\r\n        const triggerElement: HTMLElement = this.renderer.createElement('div');\r\n        this.renderer.addClass(triggerElement, 'scroll-reached-trigger-element');\r\n        this.renderer.setAttribute(triggerElement, 'trigger', event);\r\n        this.renderer.appendChild(this.triggerElementsWrapper, triggerElement);\r\n        this.triggerElements.push(triggerElement);\r\n      });\r\n\r\n      // The first time the observer is triggered as soon as the element is observed,\r\n      // This flag is used to ignore this first trigger\r\n      let intersectionObserverInit: boolean = false;\r\n\r\n      this.intersectionObserver = new IntersectionObserver((entries: IntersectionObserverEntry[]) => {\r\n        if (intersectionObserverInit) {\r\n          entries.forEach((entry: IntersectionObserverEntry) => {\r\n            if (entry.isIntersecting) {\r\n              // Forward the detected trigger element only after the observer is initialized\r\n              // Only observe the trigger elements when scrollable\r\n              this.zone.run(() => this.onReached(entry.target.getAttribute('trigger')));\r\n            }\r\n          });\r\n        } else {\r\n          // Once the initial element is detected set a flag to true\r\n          intersectionObserverInit = true;\r\n        }\r\n      }, {\r\n        root: this.scrollbar.viewport.nativeElement,\r\n      });\r\n\r\n      this.triggerElements.forEach((el: HTMLElement) => this.intersectionObserver.observe(el));\r\n    });\r\n  }\r\n\r\n  private deactivate(): void {\r\n    this.intersectionObserver?.disconnect();\r\n    this.triggerElementsWrapper?.remove();\r\n    this.triggerElements = [];\r\n  }\r\n\r\n  private setCssVariable(property: string, value: any): void {\r\n    if (value) {\r\n      this.scrollbar.nativeElement.style.setProperty(property, `${ value }px`);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.reachedTop.observed) {\r\n      this.subscribedEvents.push('top');\r\n    }\r\n    if (this.reachedBottom.observed) {\r\n      this.subscribedEvents.push('bottom');\r\n    }\r\n    if (this.reachedStart.observed) {\r\n      this.subscribedEvents.push('start');\r\n    }\r\n    if (this.reachedBottom.observed) {\r\n      this.subscribedEvents.push('end');\r\n    }\r\n\r\n    runInInjectionContext(this.injector, () => {\r\n      effect(() => {\r\n        if (this.disabled()) {\r\n          this.deactivate();\r\n        } else {\r\n          if (this.isBrowser) {\r\n            this.activate();\r\n          }\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.deactivate();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NgScrollbarReached } from './ng-scrollbar-reached';\r\n\r\n@NgModule({\r\n  imports: [\r\n    NgScrollbarReached\r\n  ],\r\n  exports: [\r\n    NgScrollbarReached\r\n  ]\r\n})\r\nexport class NgScrollbarReachedModule {\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}