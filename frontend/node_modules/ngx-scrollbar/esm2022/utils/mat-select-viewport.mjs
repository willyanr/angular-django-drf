import { Directive, effect, inject } from '@angular/core';
import { MatSelect } from '@angular/material/select';
import { NG_SCROLLBAR } from 'ngx-scrollbar';
import * as i0 from "@angular/core";
export class MatSelectViewport {
    constructor() {
        this.scrollbar = inject(NG_SCROLLBAR);
        this.matSelect = inject(MatSelect);
        effect(() => {
            if (this.scrollbar.isVerticallyScrollable() && this.matSelect.panelOpen) {
                const selected = this.matSelect.selected;
                if (selected) {
                    const element = Array.isArray(selected) ? selected[0]._getHostElement() : selected._getHostElement();
                    const height = this.scrollbar.nativeElement.clientHeight;
                    this.scrollbar.scrollTo({
                        top: element.offsetTop + element.offsetHeight - height
                    });
                }
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: MatSelectViewport, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.1", type: MatSelectViewport, isStandalone: true, selector: "ng-scrollbar[matSelectViewport], ng-scrollbar[mat-select-viewport]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: MatSelectViewport, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'ng-scrollbar[matSelectViewport], ng-scrollbar[mat-select-viewport]'
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXNlbGVjdC12aWV3cG9ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zY3JvbGxiYXIvdXRpbHMvc3JjL21hdC1zZWxlY3Qtdmlld3BvcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFELE9BQU8sRUFBYSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQWdCLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFNM0QsTUFBTSxPQUFPLGlCQUFpQjtJQU01QjtRQUppQixjQUFTLEdBQWlCLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUUvQyxjQUFTLEdBQWMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBR3hELE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDVixJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsc0JBQXNCLEVBQUUsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRTtnQkFDdkUsTUFBTSxRQUFRLEdBQTRCLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO2dCQUNsRSxJQUFJLFFBQVEsRUFBRTtvQkFDWixNQUFNLE9BQU8sR0FBZ0IsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLENBQUM7b0JBQ2xILE1BQU0sTUFBTSxHQUFXLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQztvQkFDakUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7d0JBQ3RCLEdBQUcsRUFBRSxPQUFPLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxZQUFZLEdBQUcsTUFBTTtxQkFDdkQsQ0FBQyxDQUFDO2lCQUNKO2FBQ0Y7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7OEdBbkJVLGlCQUFpQjtrR0FBakIsaUJBQWlCOzsyRkFBakIsaUJBQWlCO2tCQUo3QixTQUFTO21CQUFDO29CQUNULFVBQVUsRUFBRSxJQUFJO29CQUNoQixRQUFRLEVBQUUsb0VBQW9FO2lCQUMvRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgZWZmZWN0LCBpbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTWF0T3B0aW9uLCBNYXRTZWxlY3QgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9zZWxlY3QnO1xyXG5pbXBvcnQgeyBfTmdTY3JvbGxiYXIsIE5HX1NDUk9MTEJBUiB9IGZyb20gJ25neC1zY3JvbGxiYXInO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcclxuICBzZWxlY3RvcjogJ25nLXNjcm9sbGJhclttYXRTZWxlY3RWaWV3cG9ydF0sIG5nLXNjcm9sbGJhclttYXQtc2VsZWN0LXZpZXdwb3J0XSdcclxufSlcclxuZXhwb3J0IGNsYXNzIE1hdFNlbGVjdFZpZXdwb3J0IHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBzY3JvbGxiYXI6IF9OZ1Njcm9sbGJhciA9IGluamVjdChOR19TQ1JPTExCQVIpO1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IG1hdFNlbGVjdDogTWF0U2VsZWN0ID0gaW5qZWN0KE1hdFNlbGVjdCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgZWZmZWN0KCgpID0+IHtcclxuICAgICAgaWYgKHRoaXMuc2Nyb2xsYmFyLmlzVmVydGljYWxseVNjcm9sbGFibGUoKSAmJiB0aGlzLm1hdFNlbGVjdC5wYW5lbE9wZW4pIHtcclxuICAgICAgICBjb25zdCBzZWxlY3RlZDogTWF0T3B0aW9uIHwgTWF0T3B0aW9uW10gPSB0aGlzLm1hdFNlbGVjdC5zZWxlY3RlZDtcclxuICAgICAgICBpZiAoc2VsZWN0ZWQpIHtcclxuICAgICAgICAgIGNvbnN0IGVsZW1lbnQ6IEhUTUxFbGVtZW50ID0gQXJyYXkuaXNBcnJheShzZWxlY3RlZCkgPyBzZWxlY3RlZFswXS5fZ2V0SG9zdEVsZW1lbnQoKSA6IHNlbGVjdGVkLl9nZXRIb3N0RWxlbWVudCgpO1xyXG4gICAgICAgICAgY29uc3QgaGVpZ2h0OiBudW1iZXIgPSB0aGlzLnNjcm9sbGJhci5uYXRpdmVFbGVtZW50LmNsaWVudEhlaWdodDtcclxuICAgICAgICAgIHRoaXMuc2Nyb2xsYmFyLnNjcm9sbFRvKHtcclxuICAgICAgICAgICAgdG9wOiBlbGVtZW50Lm9mZnNldFRvcCArIGVsZW1lbnQub2Zmc2V0SGVpZ2h0IC0gaGVpZ2h0XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=