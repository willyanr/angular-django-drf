import { Directive, ViewChild, effect, inject, NgZone } from '@angular/core';
import { merge } from 'rxjs';
import { NG_SCROLLBAR } from '../utils/scrollbar-base';
import * as i0 from "@angular/core";
// @dynamic
export class ScrollbarAdapter {
    constructor() {
        // Zone reference
        this.zone = inject(NgZone);
        // Host component reference
        this.cmp = inject(NG_SCROLLBAR);
        effect((onCleanup) => {
            if (this.cmp.interactionDisabled()) {
                this.pointerEventsSub?.unsubscribe();
            }
            else {
                this.zone.runOutsideAngular(() => {
                    this.pointerEventsSub = merge(
                    // Activate scrollbar thumb drag event
                    this.thumb.dragged, 
                    // Activate scrollbar track click event
                    this.track.dragged).subscribe();
                });
            }
            onCleanup(() => this.pointerEventsSub?.unsubscribe());
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: ScrollbarAdapter, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.1", type: ScrollbarAdapter, viewQueries: [{ propertyName: "sticky", first: true, predicate: ["sticky"], descendants: true, static: true }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: ScrollbarAdapter, decorators: [{
            type: Directive
        }], ctorParameters: () => [], propDecorators: { sticky: [{
                type: ViewChild,
                args: ['sticky', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsYmFyLWFkYXB0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2Nyb2xsYmFyL3NyYy9saWIvc2Nyb2xsYmFyL3Njcm9sbGJhci1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsU0FBUyxFQUNULE1BQU0sRUFDTixNQUFNLEVBQ04sTUFBTSxFQUdQLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxLQUFLLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBRzNDLE9BQU8sRUFBRSxZQUFZLEVBQWdCLE1BQU0seUJBQXlCLENBQUM7O0FBRXJFLFdBQVc7QUFFWCxNQUFNLE9BQWdCLGdCQUFnQjtJQWdCcEM7UUFSQSxpQkFBaUI7UUFDRSxTQUFJLEdBQVcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pELDJCQUEyQjtRQUNsQixRQUFHLEdBQWlCLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQU1oRCxNQUFNLENBQUMsQ0FBQyxTQUFrQyxFQUFFLEVBQUU7WUFDNUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLEVBQUU7Z0JBQ2xDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsQ0FBQzthQUN0QztpQkFBTTtnQkFDTCxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtvQkFDL0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUs7b0JBQzNCLHNDQUFzQztvQkFDdEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPO29CQUNsQix1Q0FBdUM7b0JBQ3ZDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUNuQixDQUFDLFNBQVMsRUFBRSxDQUFDO2dCQUNoQixDQUFDLENBQUMsQ0FBQzthQUNKO1lBRUQsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQ3hELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs4R0FqQ21CLGdCQUFnQjtrR0FBaEIsZ0JBQWdCOzsyRkFBaEIsZ0JBQWdCO2tCQURyQyxTQUFTO3dEQWV3QyxNQUFNO3NCQUFyRCxTQUFTO3VCQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIERpcmVjdGl2ZSxcclxuICBWaWV3Q2hpbGQsXHJcbiAgZWZmZWN0LFxyXG4gIGluamVjdCxcclxuICBOZ1pvbmUsXHJcbiAgRWxlbWVudFJlZixcclxuICBFZmZlY3RDbGVhbnVwUmVnaXN0ZXJGblxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBtZXJnZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFRodW1iQWRhcHRlciB9IGZyb20gJy4uL3RodW1iL3RodW1iLWFkYXB0ZXInO1xyXG5pbXBvcnQgeyBUcmFja0FkYXB0ZXIgfSBmcm9tICcuLi90cmFjay90cmFjay1hZGFwdGVyJztcclxuaW1wb3J0IHsgTkdfU0NST0xMQkFSLCBfTmdTY3JvbGxiYXIgfSBmcm9tICcuLi91dGlscy9zY3JvbGxiYXItYmFzZSc7XHJcblxyXG4vLyBAZHluYW1pY1xyXG5ARGlyZWN0aXZlKClcclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFNjcm9sbGJhckFkYXB0ZXIge1xyXG5cclxuICAvLyBUaHVtYiBkaXJlY3RpdmUgcmVmZXJlbmNlXHJcbiAgcmVhZG9ubHkgdGh1bWI6IFRodW1iQWRhcHRlcjtcclxuICAvLyBUcmFjayBkaXJlY3RpdmUgcmVmZXJlbmNlXHJcbiAgcmVhZG9ubHkgdHJhY2s6IFRyYWNrQWRhcHRlcjtcclxuICAvLyBQb2ludGVyIGV2ZW50cyBzdWJzY3JpcHRpb25cclxuICBwcml2YXRlIHBvaW50ZXJFdmVudHNTdWI6IFN1YnNjcmlwdGlvbjtcclxuICAvLyBab25lIHJlZmVyZW5jZVxyXG4gIHByb3RlY3RlZCByZWFkb25seSB6b25lOiBOZ1pvbmUgPSBpbmplY3QoTmdab25lKTtcclxuICAvLyBIb3N0IGNvbXBvbmVudCByZWZlcmVuY2VcclxuICByZWFkb25seSBjbXA6IF9OZ1Njcm9sbGJhciA9IGluamVjdChOR19TQ1JPTExCQVIpO1xyXG5cclxuICAvLyBTdGlja3kgd3JhcHBlciByZWZlcmVuY2UgZm9yIHRlc3RpbmcgcHVycG9zZVxyXG4gIEBWaWV3Q2hpbGQoJ3N0aWNreScsIHsgc3RhdGljOiB0cnVlIH0pIHJlYWRvbmx5IHN0aWNreTogRWxlbWVudFJlZjxIVE1MRWxlbWVudD47XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgZWZmZWN0KChvbkNsZWFudXA6IEVmZmVjdENsZWFudXBSZWdpc3RlckZuKSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLmNtcC5pbnRlcmFjdGlvbkRpc2FibGVkKCkpIHtcclxuICAgICAgICB0aGlzLnBvaW50ZXJFdmVudHNTdWI/LnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgICAgIHRoaXMucG9pbnRlckV2ZW50c1N1YiA9IG1lcmdlKFxyXG4gICAgICAgICAgICAvLyBBY3RpdmF0ZSBzY3JvbGxiYXIgdGh1bWIgZHJhZyBldmVudFxyXG4gICAgICAgICAgICB0aGlzLnRodW1iLmRyYWdnZWQsXHJcbiAgICAgICAgICAgIC8vIEFjdGl2YXRlIHNjcm9sbGJhciB0cmFjayBjbGljayBldmVudFxyXG4gICAgICAgICAgICB0aGlzLnRyYWNrLmRyYWdnZWRcclxuICAgICAgICAgICkuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG9uQ2xlYW51cCgoKSA9PiB0aGlzLnBvaW50ZXJFdmVudHNTdWI/LnVuc3Vic2NyaWJlKCkpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==