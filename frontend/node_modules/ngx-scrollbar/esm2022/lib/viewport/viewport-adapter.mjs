import { ViewportClasses } from '../ng-scrollbar.model';
export class ViewportAdapter {
    /** Viewport clientHeight */
    get offsetHeight() {
        return this.nativeElement.offsetHeight;
    }
    /** Viewport clientWidth */
    get offsetWidth() {
        return this.nativeElement.offsetWidth;
    }
    /** Viewport scrollTop */
    get scrollTop() {
        return this.nativeElement.scrollTop;
    }
    /** Viewport scrollLeft */
    get scrollLeft() {
        return this.nativeElement.scrollLeft;
    }
    /** Content height, falls back to scroll height */
    get contentHeight() {
        return this.contentWrapperElement?.offsetHeight;
    }
    /** Content width, falls back to scroll height */
    get contentWidth() {
        return this.contentWrapperElement?.offsetWidth;
    }
    /** The horizontal remaining scrollable distance */
    get scrollMaxX() {
        return this.contentWidth - this.offsetWidth;
    }
    /** The vertical remaining scrollable distance */
    get scrollMaxY() {
        return this.contentHeight - this.offsetHeight;
    }
    constructor(nativeElement) {
        this.nativeElement = nativeElement;
        nativeElement.classList.add(ViewportClasses.Viewport);
    }
    /**
     * Initialize viewport
     */
    init(contentSelector, spacerSelector) {
        // When integrating the scrollbar with virtual scroll, the content wrapper will have fake size,
        // and a spacer element will have the real size
        // Therefore, if spaceElement is provided, it will be observed instead of the content wrapper
        if (spacerSelector) {
            // Set relative position on the spacer element to enable the functionality of sticky for the scrollbars
            spacerSelector.style.position = 'relative';
            this.contentWrapperElement = spacerSelector;
        }
        let realContentWrapper = contentSelector ?? this.nativeElement?.firstElementChild;
        // Add content wrapper class
        realContentWrapper?.classList.add(ViewportClasses.Content);
        // If spacer is not provided, set it as the content wrapper
        if (!this.contentWrapperElement && realContentWrapper) {
            this.contentWrapperElement = realContentWrapper;
        }
    }
    /**
     * Scroll viewport vertically
     */
    scrollYTo(value) {
        this.nativeElement.scrollTop = value;
    }
    /**
     * Scroll viewport horizontally
     */
    scrollXTo(value) {
        this.nativeElement.scrollLeft = value;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld3BvcnQtYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zY3JvbGxiYXIvc3JjL2xpYi92aWV3cG9ydC92aWV3cG9ydC1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV4RCxNQUFNLE9BQU8sZUFBZTtJQU0xQiw0QkFBNEI7SUFDNUIsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQztJQUN6QyxDQUFDO0lBRUQsMkJBQTJCO0lBQzNCLElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7SUFDeEMsQ0FBQztJQUVELHlCQUF5QjtJQUN6QixJQUFJLFNBQVM7UUFDWCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDO0lBQ3RDLENBQUM7SUFFRCwwQkFBMEI7SUFDMUIsSUFBSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQztJQUN2QyxDQUFDO0lBRUQsa0RBQWtEO0lBQ2xELElBQUksYUFBYTtRQUNmLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixFQUFFLFlBQVksQ0FBQztJQUNsRCxDQUFDO0lBRUQsaURBQWlEO0lBQ2pELElBQUksWUFBWTtRQUNkLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixFQUFFLFdBQVcsQ0FBQztJQUNqRCxDQUFDO0lBRUQsbURBQW1EO0lBQ25ELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzlDLENBQUM7SUFFRCxpREFBaUQ7SUFDakQsSUFBSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDaEQsQ0FBQztJQUVELFlBQW1CLGFBQTBCO1FBQTFCLGtCQUFhLEdBQWIsYUFBYSxDQUFhO1FBQzNDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJLENBQUMsZUFBNkIsRUFBRSxjQUE0QjtRQUM5RCwrRkFBK0Y7UUFDL0YsK0NBQStDO1FBQy9DLDZGQUE2RjtRQUM3RixJQUFJLGNBQWMsRUFBRTtZQUNsQix1R0FBdUc7WUFDdkcsY0FBYyxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO1lBQzNDLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxjQUFjLENBQUM7U0FDN0M7UUFFRCxJQUFJLGtCQUFrQixHQUFnQixlQUFlLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRSxpQkFBZ0MsQ0FBQztRQUU5Ryw0QkFBNEI7UUFDNUIsa0JBQWtCLEVBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFM0QsMkRBQTJEO1FBQzNELElBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLElBQUksa0JBQWtCLEVBQUU7WUFDckQsSUFBSSxDQUFDLHFCQUFxQixHQUFHLGtCQUFrQixDQUFDO1NBQ2pEO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsU0FBUyxDQUFDLEtBQWE7UUFDckIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0lBQ3ZDLENBQUM7SUFFRDs7T0FFRztJQUNILFNBQVMsQ0FBQyxLQUFhO1FBQ3JCLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztJQUN4QyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaWV3cG9ydENsYXNzZXMgfSBmcm9tICcuLi9uZy1zY3JvbGxiYXIubW9kZWwnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFZpZXdwb3J0QWRhcHRlciB7XHJcblxyXG4gIC8qKiBUaGUgZWxlbWVudCB0aGF0IHdyYXBzIHRoZSBjb250ZW50IGluc2lkZSB0aGUgdmlld3BvcnQsXHJcbiAgICogIFVzZWQgdG8gbWVhc3VyZSB0aGUgY29udGVudCBzaXplIGFuZCBvYnNlcnZlIGNvbnRlbnQgc2l6ZSBjaGFuZ2VzICovXHJcbiAgY29udGVudFdyYXBwZXJFbGVtZW50OiBIVE1MRWxlbWVudDtcclxuXHJcbiAgLyoqIFZpZXdwb3J0IGNsaWVudEhlaWdodCAqL1xyXG4gIGdldCBvZmZzZXRIZWlnaHQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG4gIH1cclxuXHJcbiAgLyoqIFZpZXdwb3J0IGNsaWVudFdpZHRoICovXHJcbiAgZ2V0IG9mZnNldFdpZHRoKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoO1xyXG4gIH1cclxuXHJcbiAgLyoqIFZpZXdwb3J0IHNjcm9sbFRvcCAqL1xyXG4gIGdldCBzY3JvbGxUb3AoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsVG9wO1xyXG4gIH1cclxuXHJcbiAgLyoqIFZpZXdwb3J0IHNjcm9sbExlZnQgKi9cclxuICBnZXQgc2Nyb2xsTGVmdCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5zY3JvbGxMZWZ0O1xyXG4gIH1cclxuXHJcbiAgLyoqIENvbnRlbnQgaGVpZ2h0LCBmYWxscyBiYWNrIHRvIHNjcm9sbCBoZWlnaHQgKi9cclxuICBnZXQgY29udGVudEhlaWdodCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuY29udGVudFdyYXBwZXJFbGVtZW50Py5vZmZzZXRIZWlnaHQ7XHJcbiAgfVxyXG5cclxuICAvKiogQ29udGVudCB3aWR0aCwgZmFsbHMgYmFjayB0byBzY3JvbGwgaGVpZ2h0ICovXHJcbiAgZ2V0IGNvbnRlbnRXaWR0aCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuY29udGVudFdyYXBwZXJFbGVtZW50Py5vZmZzZXRXaWR0aDtcclxuICB9XHJcblxyXG4gIC8qKiBUaGUgaG9yaXpvbnRhbCByZW1haW5pbmcgc2Nyb2xsYWJsZSBkaXN0YW5jZSAqL1xyXG4gIGdldCBzY3JvbGxNYXhYKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jb250ZW50V2lkdGggLSB0aGlzLm9mZnNldFdpZHRoO1xyXG4gIH1cclxuXHJcbiAgLyoqIFRoZSB2ZXJ0aWNhbCByZW1haW5pbmcgc2Nyb2xsYWJsZSBkaXN0YW5jZSAqL1xyXG4gIGdldCBzY3JvbGxNYXhZKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jb250ZW50SGVpZ2h0IC0gdGhpcy5vZmZzZXRIZWlnaHQ7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgbmF0aXZlRWxlbWVudDogSFRNTEVsZW1lbnQpIHtcclxuICAgIG5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChWaWV3cG9ydENsYXNzZXMuVmlld3BvcnQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZSB2aWV3cG9ydFxyXG4gICAqL1xyXG4gIGluaXQoY29udGVudFNlbGVjdG9yPzogSFRNTEVsZW1lbnQsIHNwYWNlclNlbGVjdG9yPzogSFRNTEVsZW1lbnQpOiB2b2lkIHtcclxuICAgIC8vIFdoZW4gaW50ZWdyYXRpbmcgdGhlIHNjcm9sbGJhciB3aXRoIHZpcnR1YWwgc2Nyb2xsLCB0aGUgY29udGVudCB3cmFwcGVyIHdpbGwgaGF2ZSBmYWtlIHNpemUsXHJcbiAgICAvLyBhbmQgYSBzcGFjZXIgZWxlbWVudCB3aWxsIGhhdmUgdGhlIHJlYWwgc2l6ZVxyXG4gICAgLy8gVGhlcmVmb3JlLCBpZiBzcGFjZUVsZW1lbnQgaXMgcHJvdmlkZWQsIGl0IHdpbGwgYmUgb2JzZXJ2ZWQgaW5zdGVhZCBvZiB0aGUgY29udGVudCB3cmFwcGVyXHJcbiAgICBpZiAoc3BhY2VyU2VsZWN0b3IpIHtcclxuICAgICAgLy8gU2V0IHJlbGF0aXZlIHBvc2l0aW9uIG9uIHRoZSBzcGFjZXIgZWxlbWVudCB0byBlbmFibGUgdGhlIGZ1bmN0aW9uYWxpdHkgb2Ygc3RpY2t5IGZvciB0aGUgc2Nyb2xsYmFyc1xyXG4gICAgICBzcGFjZXJTZWxlY3Rvci5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XHJcbiAgICAgIHRoaXMuY29udGVudFdyYXBwZXJFbGVtZW50ID0gc3BhY2VyU2VsZWN0b3I7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHJlYWxDb250ZW50V3JhcHBlcjogSFRNTEVsZW1lbnQgPSBjb250ZW50U2VsZWN0b3IgPz8gdGhpcy5uYXRpdmVFbGVtZW50Py5maXJzdEVsZW1lbnRDaGlsZCBhcyBIVE1MRWxlbWVudDtcclxuXHJcbiAgICAvLyBBZGQgY29udGVudCB3cmFwcGVyIGNsYXNzXHJcbiAgICByZWFsQ29udGVudFdyYXBwZXI/LmNsYXNzTGlzdC5hZGQoVmlld3BvcnRDbGFzc2VzLkNvbnRlbnQpO1xyXG5cclxuICAgIC8vIElmIHNwYWNlciBpcyBub3QgcHJvdmlkZWQsIHNldCBpdCBhcyB0aGUgY29udGVudCB3cmFwcGVyXHJcbiAgICBpZiAoIXRoaXMuY29udGVudFdyYXBwZXJFbGVtZW50ICYmIHJlYWxDb250ZW50V3JhcHBlcikge1xyXG4gICAgICB0aGlzLmNvbnRlbnRXcmFwcGVyRWxlbWVudCA9IHJlYWxDb250ZW50V3JhcHBlcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNjcm9sbCB2aWV3cG9ydCB2ZXJ0aWNhbGx5XHJcbiAgICovXHJcbiAgc2Nyb2xsWVRvKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMubmF0aXZlRWxlbWVudC5zY3JvbGxUb3AgPSB2YWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNjcm9sbCB2aWV3cG9ydCBob3Jpem9udGFsbHlcclxuICAgKi9cclxuICBzY3JvbGxYVG8odmFsdWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5uYXRpdmVFbGVtZW50LnNjcm9sbExlZnQgPSB2YWx1ZTtcclxuICB9XHJcbn1cclxuIl19