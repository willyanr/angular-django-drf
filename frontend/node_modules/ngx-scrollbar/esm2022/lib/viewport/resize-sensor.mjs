import { Observable, throttleTime } from 'rxjs';
import { ScrollbarUpdateReason } from '../ng-scrollbar.model';
export function resizeSensor(element, throttleDuration, isScrollbar) {
    // The first time the observer is triggered as soon as the element is observed,
    // So we need to differentiate the reason of the event fired
    let reason = ScrollbarUpdateReason.AfterInit;
    let resizeObserver;
    const stream = new Observable((observer) => {
        resizeObserver = new ResizeObserver(() => {
            observer.next(reason);
            // After first init event, mark the reason to be a resize from now on.
            reason = ScrollbarUpdateReason.Resized;
        });
        resizeObserver.observe(element);
        // If a content element has a supporting content scrollbars, observe it!
        if (!isScrollbar && element.firstElementChild) {
            resizeObserver.observe(element.firstElementChild);
        }
        return () => {
            resizeObserver?.disconnect();
        };
    });
    return throttleDuration ? stream.pipe(throttleTime(throttleDuration, null, {
        leading: true,
        trailing: true
    })) : stream;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLXNlbnNvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zY3JvbGxiYXIvc3JjL2xpYi92aWV3cG9ydC9yZXNpemUtc2Vuc29yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQVksWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzFELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTlELE1BQU0sVUFBVSxZQUFZLENBQUMsT0FBb0IsRUFBRSxnQkFBd0IsRUFBRSxXQUFxQjtJQUNoRywrRUFBK0U7SUFDL0UsNERBQTREO0lBQzVELElBQUksTUFBTSxHQUEwQixxQkFBcUIsQ0FBQyxTQUFTLENBQUM7SUFFcEUsSUFBSSxjQUE4QixDQUFDO0lBRW5DLE1BQU0sTUFBTSxHQUFzQyxJQUFJLFVBQVUsQ0FBQyxDQUFDLFFBQXlDLEVBQUUsRUFBRTtRQUM3RyxjQUFjLEdBQUcsSUFBSSxjQUFjLENBQUMsR0FBRyxFQUFFO1lBQ3ZDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDdEIsc0VBQXNFO1lBQ3RFLE1BQU0sR0FBRyxxQkFBcUIsQ0FBQyxPQUFPLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUM7UUFDSCxjQUFjLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRWhDLHdFQUF3RTtRQUN4RSxJQUFJLENBQUMsV0FBVyxJQUFJLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRTtZQUM3QyxjQUFjLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQ25EO1FBRUQsT0FBTyxHQUFHLEVBQUU7WUFDVixjQUFjLEVBQUUsVUFBVSxFQUFFLENBQUM7UUFDL0IsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLEVBQUU7UUFDekUsT0FBTyxFQUFFLElBQUk7UUFDYixRQUFRLEVBQUUsSUFBSTtLQUNmLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgT2JzZXJ2ZXIsIHRocm90dGxlVGltZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBTY3JvbGxiYXJVcGRhdGVSZWFzb24gfSBmcm9tICcuLi9uZy1zY3JvbGxiYXIubW9kZWwnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlc2l6ZVNlbnNvcihlbGVtZW50OiBIVE1MRWxlbWVudCwgdGhyb3R0bGVEdXJhdGlvbjogbnVtYmVyLCBpc1Njcm9sbGJhcj86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPFNjcm9sbGJhclVwZGF0ZVJlYXNvbj4ge1xyXG4gIC8vIFRoZSBmaXJzdCB0aW1lIHRoZSBvYnNlcnZlciBpcyB0cmlnZ2VyZWQgYXMgc29vbiBhcyB0aGUgZWxlbWVudCBpcyBvYnNlcnZlZCxcclxuICAvLyBTbyB3ZSBuZWVkIHRvIGRpZmZlcmVudGlhdGUgdGhlIHJlYXNvbiBvZiB0aGUgZXZlbnQgZmlyZWRcclxuICBsZXQgcmVhc29uOiBTY3JvbGxiYXJVcGRhdGVSZWFzb24gPSBTY3JvbGxiYXJVcGRhdGVSZWFzb24uQWZ0ZXJJbml0O1xyXG5cclxuICBsZXQgcmVzaXplT2JzZXJ2ZXI6IFJlc2l6ZU9ic2VydmVyO1xyXG5cclxuICBjb25zdCBzdHJlYW06IE9ic2VydmFibGU8U2Nyb2xsYmFyVXBkYXRlUmVhc29uPiA9IG5ldyBPYnNlcnZhYmxlKChvYnNlcnZlcjogT2JzZXJ2ZXI8U2Nyb2xsYmFyVXBkYXRlUmVhc29uPikgPT4ge1xyXG4gICAgcmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKCkgPT4ge1xyXG4gICAgICBvYnNlcnZlci5uZXh0KHJlYXNvbik7XHJcbiAgICAgIC8vIEFmdGVyIGZpcnN0IGluaXQgZXZlbnQsIG1hcmsgdGhlIHJlYXNvbiB0byBiZSBhIHJlc2l6ZSBmcm9tIG5vdyBvbi5cclxuICAgICAgcmVhc29uID0gU2Nyb2xsYmFyVXBkYXRlUmVhc29uLlJlc2l6ZWQ7XHJcbiAgICB9KTtcclxuICAgIHJlc2l6ZU9ic2VydmVyLm9ic2VydmUoZWxlbWVudCk7XHJcblxyXG4gICAgLy8gSWYgYSBjb250ZW50IGVsZW1lbnQgaGFzIGEgc3VwcG9ydGluZyBjb250ZW50IHNjcm9sbGJhcnMsIG9ic2VydmUgaXQhXHJcbiAgICBpZiAoIWlzU2Nyb2xsYmFyICYmIGVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQpIHtcclxuICAgICAgcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICByZXNpemVPYnNlcnZlcj8uZGlzY29ubmVjdCgpO1xyXG4gICAgfTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHRocm90dGxlRHVyYXRpb24gPyBzdHJlYW0ucGlwZSh0aHJvdHRsZVRpbWUodGhyb3R0bGVEdXJhdGlvbiwgbnVsbCwge1xyXG4gICAgbGVhZGluZzogdHJ1ZSxcclxuICAgIHRyYWlsaW5nOiB0cnVlXHJcbiAgfSkpIDogc3RyZWFtO1xyXG59XHJcbiJdfQ==