import { Injectable, Inject, inject, Optional, signal, PLATFORM_ID } from '@angular/core';
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { getRtlScrollAxisType } from '@angular/cdk/platform';
import { NG_SCROLLBAR_OPTIONS } from '../ng-scrollbar.model';
import * as i0 from "@angular/core";
const defaultOptions = {
    scrollTimelinePolyfill: 'https://flackr.github.io/scroll-timeline/dist/scroll-timeline.js',
    trackClass: '',
    thumbClass: '',
    orientation: 'auto',
    appearance: 'standard',
    visibility: 'native',
    position: 'native',
    clickScrollDuration: 50,
    sensorThrottleTime: 0,
    disableSensor: false,
    disableInteraction: false
};
export class ScrollbarManager {
    constructor(options) {
        this.isBrowser = isPlatformBrowser(inject(PLATFORM_ID));
        this.document = inject(DOCUMENT);
        this.window = this.document.defaultView;
        this.globalOptions = {};
        this.rtlScrollAxisType = getRtlScrollAxisType();
        this.scrollTimelinePolyfill = signal(null);
        this.globalOptions = options ? { ...defaultOptions, ...options } : defaultOptions;
        if (this.isBrowser && !this.window['ScrollTimeline'] && !CSS.supports('animation-timeline', 'scroll()')) {
            this.initPolyfill();
        }
    }
    async initPolyfill() {
        try {
            // Create a script element
            const script = this.document.createElement('script');
            script.src = this.globalOptions.scrollTimelinePolyfill;
            // Wait for the script to load
            await new Promise((resolve, reject) => {
                script.onload = resolve;
                script.onerror = reject;
                this.document.head.appendChild(script);
            });
            // Once loaded, access and execute the function attached to the window object
            if (this.window['ScrollTimeline']) {
                this.scrollTimelinePolyfill.set(window['ScrollTimeline']);
            }
            else {
                console.error('ScrollTimeline is not attached to the window object.');
            }
        }
        catch (error) {
            console.error('Error loading ScrollTimeline script:', error);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: ScrollbarManager, deps: [{ token: NG_SCROLLBAR_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: ScrollbarManager, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: ScrollbarManager, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NG_SCROLLBAR_OPTIONS]
                }] }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsYmFyLW1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2Nyb2xsYmFyL3NyYy9saWIvdXRpbHMvc2Nyb2xsYmFyLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQWtCLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxRyxPQUFPLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLG9CQUFvQixFQUFxQixNQUFNLHVCQUF1QixDQUFDO0FBQ2hGLE9BQU8sRUFBRSxvQkFBb0IsRUFBc0IsTUFBTSx1QkFBdUIsQ0FBQzs7QUFHakYsTUFBTSxjQUFjLEdBQXVCO0lBQ3pDLHNCQUFzQixFQUFFLGtFQUFrRTtJQUMxRixVQUFVLEVBQUUsRUFBRTtJQUNkLFVBQVUsRUFBRSxFQUFFO0lBQ2QsV0FBVyxFQUFFLE1BQU07SUFDbkIsVUFBVSxFQUFFLFVBQVU7SUFDdEIsVUFBVSxFQUFFLFFBQVE7SUFDcEIsUUFBUSxFQUFFLFFBQVE7SUFDbEIsbUJBQW1CLEVBQUUsRUFBRTtJQUN2QixrQkFBa0IsRUFBRSxDQUFDO0lBQ3JCLGFBQWEsRUFBRSxLQUFLO0lBQ3BCLGtCQUFrQixFQUFFLEtBQUs7Q0FDMUIsQ0FBQztBQUlGLE1BQU0sT0FBTyxnQkFBZ0I7SUFjM0IsWUFBc0QsT0FBMkI7UUFaaEUsY0FBUyxHQUFZLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBRXBFLGFBQVEsR0FBYSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFdEMsV0FBTSxHQUFXLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDO1FBRTNDLGtCQUFhLEdBQXVCLEVBQUUsQ0FBQztRQUV2QyxzQkFBaUIsR0FBc0Isb0JBQW9CLEVBQUUsQ0FBQztRQUU5RCwyQkFBc0IsR0FBd0IsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBR2xFLElBQUksQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsY0FBYyxFQUFFLEdBQUcsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQztRQUVsRixJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLG9CQUFvQixFQUFFLFVBQVUsQ0FBQyxFQUFFO1lBQ3ZHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUNyQjtJQUNILENBQUM7SUFFRCxLQUFLLENBQUMsWUFBWTtRQUNoQixJQUFJO1lBQ0YsMEJBQTBCO1lBQzFCLE1BQU0sTUFBTSxHQUFzQixJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN4RSxNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsc0JBQXNCLENBQUM7WUFFdkQsOEJBQThCO1lBQzlCLE1BQU0sSUFBSSxPQUFPLENBQU0sQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7Z0JBQ3pDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDO2dCQUN4QixNQUFNLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztnQkFDeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3pDLENBQUMsQ0FBQyxDQUFDO1lBRUgsNkVBQTZFO1lBQzdFLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO2dCQUNqQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7YUFDM0Q7aUJBQU07Z0JBQ0wsT0FBTyxDQUFDLEtBQUssQ0FBQyxzREFBc0QsQ0FBQyxDQUFDO2FBQ3ZFO1NBQ0Y7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE9BQU8sQ0FBQyxLQUFLLENBQUMsc0NBQXNDLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDOUQ7SUFDSCxDQUFDOzhHQTVDVSxnQkFBZ0Isa0JBY0ssb0JBQW9CO2tIQWR6QyxnQkFBZ0IsY0FESCxNQUFNOzsyRkFDbkIsZ0JBQWdCO2tCQUQ1QixVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7MEJBZW5CLFFBQVE7OzBCQUFJLE1BQU07MkJBQUMsb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0LCBpbmplY3QsIE9wdGlvbmFsLCBzaWduYWwsIFdyaXRhYmxlU2lnbmFsLCBQTEFURk9STV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBET0NVTUVOVCwgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBnZXRSdGxTY3JvbGxBeGlzVHlwZSwgUnRsU2Nyb2xsQXhpc1R5cGUgfSBmcm9tICdAYW5ndWxhci9jZGsvcGxhdGZvcm0nO1xyXG5pbXBvcnQgeyBOR19TQ1JPTExCQVJfT1BUSU9OUywgTmdTY3JvbGxiYXJPcHRpb25zIH0gZnJvbSAnLi4vbmctc2Nyb2xsYmFyLm1vZGVsJztcclxuXHJcblxyXG5jb25zdCBkZWZhdWx0T3B0aW9uczogTmdTY3JvbGxiYXJPcHRpb25zID0ge1xyXG4gIHNjcm9sbFRpbWVsaW5lUG9seWZpbGw6ICdodHRwczovL2ZsYWNrci5naXRodWIuaW8vc2Nyb2xsLXRpbWVsaW5lL2Rpc3Qvc2Nyb2xsLXRpbWVsaW5lLmpzJyxcclxuICB0cmFja0NsYXNzOiAnJyxcclxuICB0aHVtYkNsYXNzOiAnJyxcclxuICBvcmllbnRhdGlvbjogJ2F1dG8nLFxyXG4gIGFwcGVhcmFuY2U6ICdzdGFuZGFyZCcsXHJcbiAgdmlzaWJpbGl0eTogJ25hdGl2ZScsXHJcbiAgcG9zaXRpb246ICduYXRpdmUnLFxyXG4gIGNsaWNrU2Nyb2xsRHVyYXRpb246IDUwLFxyXG4gIHNlbnNvclRocm90dGxlVGltZTogMCxcclxuICBkaXNhYmxlU2Vuc29yOiBmYWxzZSxcclxuICBkaXNhYmxlSW50ZXJhY3Rpb246IGZhbHNlXHJcbn07XHJcblxyXG5cclxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcclxuZXhwb3J0IGNsYXNzIFNjcm9sbGJhck1hbmFnZXIge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IGlzQnJvd3NlcjogYm9vbGVhbiA9IGlzUGxhdGZvcm1Ccm93c2VyKGluamVjdChQTEFURk9STV9JRCkpO1xyXG5cclxuICByZWFkb25seSBkb2N1bWVudDogRG9jdW1lbnQgPSBpbmplY3QoRE9DVU1FTlQpO1xyXG5cclxuICByZWFkb25seSB3aW5kb3c6IFdpbmRvdyA9IHRoaXMuZG9jdW1lbnQuZGVmYXVsdFZpZXc7XHJcblxyXG4gIHJlYWRvbmx5IGdsb2JhbE9wdGlvbnM6IE5nU2Nyb2xsYmFyT3B0aW9ucyA9IHt9O1xyXG5cclxuICByZWFkb25seSBydGxTY3JvbGxBeGlzVHlwZTogUnRsU2Nyb2xsQXhpc1R5cGUgPSBnZXRSdGxTY3JvbGxBeGlzVHlwZSgpO1xyXG5cclxuICByZWFkb25seSBzY3JvbGxUaW1lbGluZVBvbHlmaWxsOiBXcml0YWJsZVNpZ25hbDxhbnk+ID0gc2lnbmFsKG51bGwpO1xyXG5cclxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KE5HX1NDUk9MTEJBUl9PUFRJT05TKSBvcHRpb25zOiBOZ1Njcm9sbGJhck9wdGlvbnMpIHtcclxuICAgIHRoaXMuZ2xvYmFsT3B0aW9ucyA9IG9wdGlvbnMgPyB7IC4uLmRlZmF1bHRPcHRpb25zLCAuLi5vcHRpb25zIH0gOiBkZWZhdWx0T3B0aW9ucztcclxuXHJcbiAgICBpZiAodGhpcy5pc0Jyb3dzZXIgJiYgIXRoaXMud2luZG93WydTY3JvbGxUaW1lbGluZSddICYmICFDU1Muc3VwcG9ydHMoJ2FuaW1hdGlvbi10aW1lbGluZScsICdzY3JvbGwoKScpKSB7XHJcbiAgICAgIHRoaXMuaW5pdFBvbHlmaWxsKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhc3luYyBpbml0UG9seWZpbGwoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBDcmVhdGUgYSBzY3JpcHQgZWxlbWVudFxyXG4gICAgICBjb25zdCBzY3JpcHQ6IEhUTUxTY3JpcHRFbGVtZW50ID0gdGhpcy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICAgICAgc2NyaXB0LnNyYyA9IHRoaXMuZ2xvYmFsT3B0aW9ucy5zY3JvbGxUaW1lbGluZVBvbHlmaWxsO1xyXG5cclxuICAgICAgLy8gV2FpdCBmb3IgdGhlIHNjcmlwdCB0byBsb2FkXHJcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlPGFueT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIHNjcmlwdC5vbmxvYWQgPSByZXNvbHZlO1xyXG4gICAgICAgIHNjcmlwdC5vbmVycm9yID0gcmVqZWN0O1xyXG4gICAgICAgIHRoaXMuZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIE9uY2UgbG9hZGVkLCBhY2Nlc3MgYW5kIGV4ZWN1dGUgdGhlIGZ1bmN0aW9uIGF0dGFjaGVkIHRvIHRoZSB3aW5kb3cgb2JqZWN0XHJcbiAgICAgIGlmICh0aGlzLndpbmRvd1snU2Nyb2xsVGltZWxpbmUnXSkge1xyXG4gICAgICAgIHRoaXMuc2Nyb2xsVGltZWxpbmVQb2x5ZmlsbC5zZXQod2luZG93WydTY3JvbGxUaW1lbGluZSddKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdTY3JvbGxUaW1lbGluZSBpcyBub3QgYXR0YWNoZWQgdG8gdGhlIHdpbmRvdyBvYmplY3QuJyk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxvYWRpbmcgU2Nyb2xsVGltZWxpbmUgc2NyaXB0OicsIGVycm9yKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19