import { Directive, inject, effect, NgZone, ElementRef } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { of, fromEvent, map, takeUntil, tap, switchMap } from 'rxjs';
import { enableSelection, preventSelection, stopPropagation } from '../utils/common';
import { TrackAdapter } from '../track/track-adapter';
import { NG_SCROLLBAR } from '../utils/scrollbar-base';
import { ScrollbarManager } from '../utils/scrollbar-manager';
import * as i0 from "@angular/core";
// @dynamic
export class ThumbAdapter {
    get trackMax() {
        return this.track.size - this.size;
    }
    // Get thumb client rect
    get clientRect() {
        return this.nativeElement.getBoundingClientRect();
    }
    /**
     * Stream that emits the 'scrollTo' position when a scrollbar thumb element is dragged
     * This function is called by thumb drag event using viewport or scrollbar pointer events
     */
    get dragged() {
        return fromEvent(this.nativeElement, 'pointerdown').pipe(stopPropagation(), switchMap((e) => {
            let trackMaxStart;
            let scrollMaxStart;
            const dragStart = of(e).pipe(preventSelection(this.document), tap(() => {
                // Capture scrollMax and trackMax once
                trackMaxStart = this.trackMax;
                scrollMaxStart = this.viewportScrollMax;
                this.setDragging(this.axis);
            }));
            const dragging = fromEvent(this.document, 'pointermove').pipe(stopPropagation());
            const dragEnd = fromEvent(this.document, 'pointerup', { capture: true }).pipe(stopPropagation(), enableSelection(this.document), tap(() => this.setDragging('none')));
            return dragStart.pipe(map((e) => e[this.pageProperty]), map((pageOffset) => pageOffset - this.dragStartOffset), switchMap((mouseDownOffset) => dragging.pipe(map((e) => e[this.clientProperty]), 
            // Calculate how far the pointer is from the top/left of the scrollbar (minus the dragOffset).
            map((mouseOffset) => mouseOffset - this.track.offset), map((offset) => scrollMaxStart * (offset - mouseDownOffset) / trackMaxStart), map((position) => this.handleDrag(position, scrollMaxStart)), tap((position) => this.scrollTo(position)), takeUntil(dragEnd))));
        }));
    }
    constructor() {
        this.zone = inject(NgZone);
        this.document = inject(DOCUMENT);
        this.cmp = inject(NG_SCROLLBAR);
        this.manager = inject(ScrollbarManager);
        this.track = inject(TrackAdapter);
        this.nativeElement = inject((ElementRef)).nativeElement;
        effect(() => {
            const script = this.manager.scrollTimelinePolyfill();
            if (script && !this.animation) {
                this.animation = startPolyfill(script, this.nativeElement, this.cmp.viewport.nativeElement, this.axis);
            }
        });
    }
    setDragging(value) {
        this.zone.run(() => this.cmp.dragging.set(value));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: ThumbAdapter, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.1", type: ThumbAdapter, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: ThumbAdapter, decorators: [{
            type: Directive
        }], ctorParameters: () => [] });
function startPolyfill(ScrollTimeline, element, source, axis) {
    return element.animate({
        translate: [
            'var(--_scrollbar-thumb-transform-from)',
            'var(--_scrollbar-thumb-transform-to)'
        ]
    }, {
        fill: 'both',
        easing: 'linear',
        timeline: new ScrollTimeline({ source, axis })
    });
}
//# sourceMappingURL=data:application/json;base64,