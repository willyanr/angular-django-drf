import { Directive, effect } from '@angular/core';
import { RtlScrollAxisType } from '@angular/cdk/platform';
import { ThumbAdapter } from './thumb-adapter';
import * as i0 from "@angular/core";
export class ThumbXDirective extends ThumbAdapter {
    get clientProperty() {
        return 'clientX';
    }
    get pageProperty() {
        return 'pageX';
    }
    get viewportScrollMax() {
        return this.cmp.viewport.scrollMaxX;
    }
    get dragStartOffset() {
        return this.clientRect.left + this.document.defaultView.pageXOffset;
    }
    get offset() {
        return this.clientRect.left;
    }
    get size() {
        return this.nativeElement.clientWidth;
    }
    constructor() {
        super();
        this.axis = 'x';
        effect(() => {
            if (this.cmp.direction() === 'rtl') {
                if (this.cmp.rtlScrollAxisType === RtlScrollAxisType.NEGATED) {
                    this.handleDrag = (position, scrollMax) => -(scrollMax - position);
                }
                if (this.cmp.rtlScrollAxisType === RtlScrollAxisType.INVERTED) {
                    this.handleDrag = (position, scrollMax) => position - scrollMax;
                }
            }
            else {
                this.handleDrag = (position) => position;
            }
        });
    }
    scrollTo(position) {
        this.cmp.viewport.scrollXTo(position);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: ThumbXDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.1", type: ThumbXDirective, isStandalone: true, selector: "[scrollbarThumbX]", providers: [{ provide: ThumbAdapter, useExisting: ThumbXDirective }], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: ThumbXDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[scrollbarThumbX]',
                    providers: [{ provide: ThumbAdapter, useExisting: ThumbXDirective }]
                }]
        }], ctorParameters: () => [] });
export class ThumbYDirective extends ThumbAdapter {
    constructor() {
        super(...arguments);
        this.axis = 'y';
        this.handleDrag = (position) => position;
    }
    get pageProperty() {
        return 'pageY';
    }
    get viewportScrollMax() {
        return this.cmp.viewport.scrollMaxY;
    }
    get clientProperty() {
        return 'clientY';
    }
    get dragStartOffset() {
        return this.clientRect.top + this.document.defaultView.pageYOffset;
    }
    get offset() {
        return this.clientRect.top;
    }
    get size() {
        return this.nativeElement.clientHeight;
    }
    scrollTo(position) {
        this.cmp.viewport.scrollYTo(position);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: ThumbYDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.1", type: ThumbYDirective, isStandalone: true, selector: "[scrollbarThumbY]", providers: [{ provide: ThumbAdapter, useExisting: ThumbYDirective }], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: ThumbYDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[scrollbarThumbY]',
                    providers: [{ provide: ThumbAdapter, useExisting: ThumbYDirective }]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGh1bWIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2Nyb2xsYmFyL3NyYy9saWIvdGh1bWIvdGh1bWIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQU8vQyxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxZQUFZO0lBRS9DLElBQWMsY0FBYztRQUMxQixPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsSUFBYyxZQUFZO1FBQ3hCLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxJQUFJLGlCQUFpQjtRQUNuQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztJQUN0QyxDQUFDO0lBRUQsSUFBSSxlQUFlO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDO0lBQ3RFLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO0lBQzlCLENBQUM7SUFFRCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO0lBQ3hDLENBQUM7SUFNRDtRQUNFLEtBQUssRUFBRSxDQUFDO1FBTEEsU0FBSSxHQUFjLEdBQUcsQ0FBQztRQU05QixNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ1YsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxLQUFLLEtBQUssRUFBRTtnQkFDbEMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLGlCQUFpQixLQUFLLGlCQUFpQixDQUFDLE9BQU8sRUFBRTtvQkFDNUQsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLFFBQWdCLEVBQUUsU0FBaUIsRUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsQ0FBQztpQkFDNUY7Z0JBQ0QsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLGlCQUFpQixLQUFLLGlCQUFpQixDQUFDLFFBQVEsRUFBRTtvQkFDN0QsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLFFBQWdCLEVBQUUsU0FBaUIsRUFBVSxFQUFFLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztpQkFDekY7YUFDRjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsUUFBZ0IsRUFBVSxFQUFFLENBQUMsUUFBUSxDQUFDO2FBQzFEO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRVMsUUFBUSxDQUFDLFFBQWdCO1FBQ2pDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN4QyxDQUFDOzhHQWhEVSxlQUFlO2tHQUFmLGVBQWUsZ0VBRmYsQ0FBQyxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLGVBQWUsRUFBRSxDQUFDOzsyRkFFekQsZUFBZTtrQkFMM0IsU0FBUzttQkFBQztvQkFDVCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsUUFBUSxFQUFFLG1CQUFtQjtvQkFDN0IsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLFdBQVcsaUJBQWlCLEVBQUUsQ0FBQztpQkFDckU7O0FBeURELE1BQU0sT0FBTyxlQUFnQixTQUFRLFlBQVk7SUFMakQ7O1FBK0JZLFNBQUksR0FBYyxHQUFHLENBQUM7UUFFdEIsZUFBVSxHQUFHLENBQUMsUUFBZ0IsRUFBVSxFQUFFLENBQUMsUUFBUSxDQUFDO0tBSy9EO0lBL0JDLElBQWMsWUFBWTtRQUN4QixPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBRUQsSUFBSSxpQkFBaUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUM7SUFDdEMsQ0FBQztJQUVELElBQWMsY0FBYztRQUMxQixPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsSUFBSSxlQUFlO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDO0lBQ3JFLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDO0lBQzdCLENBQUM7SUFFRCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO0lBQ3pDLENBQUM7SUFNUyxRQUFRLENBQUMsUUFBZ0I7UUFDakMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7OEdBaENVLGVBQWU7a0dBQWYsZUFBZSxnRUFGZixDQUFDLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLENBQUM7OzJGQUV6RCxlQUFlO2tCQUwzQixTQUFTO21CQUFDO29CQUNULFVBQVUsRUFBRSxJQUFJO29CQUNoQixRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxpQkFBaUIsRUFBRSxDQUFDO2lCQUNyRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgZWZmZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJ0bFNjcm9sbEF4aXNUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BsYXRmb3JtJztcclxuaW1wb3J0IHsgVGh1bWJBZGFwdGVyIH0gZnJvbSAnLi90aHVtYi1hZGFwdGVyJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHN0YW5kYWxvbmU6IHRydWUsXHJcbiAgc2VsZWN0b3I6ICdbc2Nyb2xsYmFyVGh1bWJYXScsXHJcbiAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBUaHVtYkFkYXB0ZXIsIHVzZUV4aXN0aW5nOiBUaHVtYlhEaXJlY3RpdmUgfV1cclxufSlcclxuZXhwb3J0IGNsYXNzIFRodW1iWERpcmVjdGl2ZSBleHRlbmRzIFRodW1iQWRhcHRlciB7XHJcblxyXG4gIHByb3RlY3RlZCBnZXQgY2xpZW50UHJvcGVydHkoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiAnY2xpZW50WCc7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgZ2V0IHBhZ2VQcm9wZXJ0eSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuICdwYWdlWCc7XHJcbiAgfVxyXG5cclxuICBnZXQgdmlld3BvcnRTY3JvbGxNYXgoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmNtcC52aWV3cG9ydC5zY3JvbGxNYXhYO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGRyYWdTdGFydE9mZnNldCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuY2xpZW50UmVjdC5sZWZ0ICsgdGhpcy5kb2N1bWVudC5kZWZhdWx0Vmlldy5wYWdlWE9mZnNldDtcclxuICB9XHJcblxyXG4gIGdldCBvZmZzZXQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmNsaWVudFJlY3QubGVmdDtcclxuICB9XHJcblxyXG4gIGdldCBzaXplKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LmNsaWVudFdpZHRoO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGF4aXM6ICd4JyB8ICd5JyA9ICd4JztcclxuXHJcbiAgcHJvdGVjdGVkIGhhbmRsZURyYWc6IChwb3NpdGlvbjogbnVtYmVyLCBzY3JvbGxNYXg6IG51bWJlcikgPT4gbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICBlZmZlY3QoKCkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5jbXAuZGlyZWN0aW9uKCkgPT09ICdydGwnKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY21wLnJ0bFNjcm9sbEF4aXNUeXBlID09PSBSdGxTY3JvbGxBeGlzVHlwZS5ORUdBVEVEKSB7XHJcbiAgICAgICAgICB0aGlzLmhhbmRsZURyYWcgPSAocG9zaXRpb246IG51bWJlciwgc2Nyb2xsTWF4OiBudW1iZXIpOiBudW1iZXIgPT4gLShzY3JvbGxNYXggLSBwb3NpdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNtcC5ydGxTY3JvbGxBeGlzVHlwZSA9PT0gUnRsU2Nyb2xsQXhpc1R5cGUuSU5WRVJURUQpIHtcclxuICAgICAgICAgIHRoaXMuaGFuZGxlRHJhZyA9IChwb3NpdGlvbjogbnVtYmVyLCBzY3JvbGxNYXg6IG51bWJlcik6IG51bWJlciA9PiBwb3NpdGlvbiAtIHNjcm9sbE1heDtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVEcmFnID0gKHBvc2l0aW9uOiBudW1iZXIpOiBudW1iZXIgPT4gcG9zaXRpb247XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHNjcm9sbFRvKHBvc2l0aW9uOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuY21wLnZpZXdwb3J0LnNjcm9sbFhUbyhwb3NpdGlvbik7XHJcbiAgfVxyXG59XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzdGFuZGFsb25lOiB0cnVlLFxyXG4gIHNlbGVjdG9yOiAnW3Njcm9sbGJhclRodW1iWV0nLFxyXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogVGh1bWJBZGFwdGVyLCB1c2VFeGlzdGluZzogVGh1bWJZRGlyZWN0aXZlIH1dXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUaHVtYllEaXJlY3RpdmUgZXh0ZW5kcyBUaHVtYkFkYXB0ZXIge1xyXG5cclxuICBwcm90ZWN0ZWQgZ2V0IHBhZ2VQcm9wZXJ0eSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuICdwYWdlWSc7XHJcbiAgfVxyXG5cclxuICBnZXQgdmlld3BvcnRTY3JvbGxNYXgoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmNtcC52aWV3cG9ydC5zY3JvbGxNYXhZO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGdldCBjbGllbnRQcm9wZXJ0eSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuICdjbGllbnRZJztcclxuICB9XHJcblxyXG4gIGdldCBkcmFnU3RhcnRPZmZzZXQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmNsaWVudFJlY3QudG9wICsgdGhpcy5kb2N1bWVudC5kZWZhdWx0Vmlldy5wYWdlWU9mZnNldDtcclxuICB9XHJcblxyXG4gIGdldCBvZmZzZXQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmNsaWVudFJlY3QudG9wO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHNpemUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQuY2xpZW50SGVpZ2h0O1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGF4aXM6ICd4JyB8ICd5JyA9ICd5JztcclxuXHJcbiAgcHJvdGVjdGVkIGhhbmRsZURyYWcgPSAocG9zaXRpb246IG51bWJlcik6IG51bWJlciA9PiBwb3NpdGlvbjtcclxuXHJcbiAgcHJvdGVjdGVkIHNjcm9sbFRvKHBvc2l0aW9uOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuY21wLnZpZXdwb3J0LnNjcm9sbFlUbyhwb3NpdGlvbik7XHJcbiAgfVxyXG59XHJcbiJdfQ==