import { Directive } from '@angular/core';
import { fromPromise } from 'rxjs/internal/observable/innerFrom';
import { TrackAdapter } from './track-adapter';
import * as i0 from "@angular/core";
export class TrackXDirective extends TrackAdapter {
    constructor() {
        super(...arguments);
        this.cssLengthProperty = '--track-x-length';
        this.clientProperty = 'clientX';
    }
    get offset() {
        return this.clientRect.left;
    }
    get size() {
        return this.nativeElement.clientWidth;
    }
    get viewportScrollSize() {
        return this.cmp.viewport.contentWidth;
    }
    get viewportViewportSize() {
        return this.cmp.viewport.offsetWidth;
    }
    get viewportScrollOffset() {
        return this.cmp.viewport.scrollLeft;
    }
    scrollTo(left) {
        return fromPromise(this.cmp.scrollTo({ left }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: TrackXDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.1", type: TrackXDirective, isStandalone: true, selector: "[scrollbarTrackX]", providers: [{ provide: TrackAdapter, useExisting: TrackXDirective }], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: TrackXDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[scrollbarTrackX]',
                    providers: [{ provide: TrackAdapter, useExisting: TrackXDirective }]
                }]
        }] });
export class TrackYDirective extends TrackAdapter {
    constructor() {
        super(...arguments);
        this.cssLengthProperty = '--track-y-length';
        this.clientProperty = 'clientY';
    }
    get offset() {
        return this.clientRect.top;
    }
    get size() {
        return this.nativeElement.clientHeight;
    }
    get viewportScrollSize() {
        return this.cmp.viewport.contentHeight;
    }
    get viewportViewportSize() {
        return this.cmp.viewport.offsetHeight;
    }
    get viewportScrollOffset() {
        return this.cmp.viewport.scrollTop;
    }
    scrollTo(top) {
        return fromPromise(this.cmp.scrollTo({ top }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: TrackYDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.1", type: TrackYDirective, isStandalone: true, selector: "[scrollbarTrackY]", providers: [{ provide: TrackAdapter, useExisting: TrackYDirective }], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: TrackYDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[scrollbarTrackY]',
                    providers: [{ provide: TrackAdapter, useExisting: TrackYDirective }]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2Nyb2xsYmFyL3NyYy9saWIvdHJhY2svdHJhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUxQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDakUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQU8vQyxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxZQUFZO0lBTGpEOztRQU9XLHNCQUFpQixHQUFXLGtCQUFrQixDQUFDO1FBRS9DLG1CQUFjLEdBQVcsU0FBUyxDQUFDO0tBMEI3QztJQXhCQyxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO0lBQzlCLENBQUM7SUFFRCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO0lBQ3hDLENBQUM7SUFHRCxJQUFjLGtCQUFrQjtRQUM5QixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQztJQUN4QyxDQUFDO0lBRUQsSUFBYyxvQkFBb0I7UUFDaEMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7SUFDdkMsQ0FBQztJQUVELElBQWMsb0JBQW9CO1FBQ2hDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDO0lBQ3RDLENBQUM7SUFFUyxRQUFRLENBQUMsSUFBWTtRQUM3QixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNsRCxDQUFDOzhHQTdCVSxlQUFlO2tHQUFmLGVBQWUsZ0VBRmYsQ0FBQyxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLGVBQWUsRUFBRSxDQUFDOzsyRkFFekQsZUFBZTtrQkFMM0IsU0FBUzttQkFBQztvQkFDVCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsUUFBUSxFQUFFLG1CQUFtQjtvQkFDN0IsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLFdBQVcsaUJBQWlCLEVBQUUsQ0FBQztpQkFDckU7O0FBc0NELE1BQU0sT0FBTyxlQUFnQixTQUFRLFlBQVk7SUFMakQ7O1FBT1csc0JBQWlCLEdBQVcsa0JBQWtCLENBQUM7UUFFL0MsbUJBQWMsR0FBVyxTQUFTLENBQUM7S0F5QjdDO0lBdkJDLElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUM7SUFDN0IsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUM7SUFDekMsQ0FBQztJQUVELElBQWMsa0JBQWtCO1FBQzlCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDO0lBQ3pDLENBQUM7SUFFRCxJQUFjLG9CQUFvQjtRQUNoQyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQztJQUN4QyxDQUFDO0lBRUQsSUFBYyxvQkFBb0I7UUFDaEMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7SUFDckMsQ0FBQztJQUVTLFFBQVEsQ0FBQyxHQUFXO1FBQzVCLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7OEdBNUJVLGVBQWU7a0dBQWYsZUFBZSxnRUFGZixDQUFDLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLENBQUM7OzJGQUV6RCxlQUFlO2tCQUwzQixTQUFTO21CQUFDO29CQUNULFVBQVUsRUFBRSxJQUFJO29CQUNoQixRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxpQkFBaUIsRUFBRSxDQUFDO2lCQUNyRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGZyb21Qcm9taXNlIH0gZnJvbSAncnhqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XHJcbmltcG9ydCB7IFRyYWNrQWRhcHRlciB9IGZyb20gJy4vdHJhY2stYWRhcHRlcic7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzdGFuZGFsb25lOiB0cnVlLFxyXG4gIHNlbGVjdG9yOiAnW3Njcm9sbGJhclRyYWNrWF0nLFxyXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogVHJhY2tBZGFwdGVyLCB1c2VFeGlzdGluZzogVHJhY2tYRGlyZWN0aXZlIH1dXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUcmFja1hEaXJlY3RpdmUgZXh0ZW5kcyBUcmFja0FkYXB0ZXIge1xyXG5cclxuICByZWFkb25seSBjc3NMZW5ndGhQcm9wZXJ0eTogc3RyaW5nID0gJy0tdHJhY2steC1sZW5ndGgnO1xyXG5cclxuICByZWFkb25seSBjbGllbnRQcm9wZXJ0eTogc3RyaW5nID0gJ2NsaWVudFgnO1xyXG5cclxuICBnZXQgb2Zmc2V0KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jbGllbnRSZWN0LmxlZnQ7XHJcbiAgfVxyXG5cclxuICBnZXQgc2l6ZSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5jbGllbnRXaWR0aDtcclxuICB9XHJcblxyXG5cclxuICBwcm90ZWN0ZWQgZ2V0IHZpZXdwb3J0U2Nyb2xsU2l6ZSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuY21wLnZpZXdwb3J0LmNvbnRlbnRXaWR0aDtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBnZXQgdmlld3BvcnRWaWV3cG9ydFNpemUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmNtcC52aWV3cG9ydC5vZmZzZXRXaWR0aDtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBnZXQgdmlld3BvcnRTY3JvbGxPZmZzZXQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmNtcC52aWV3cG9ydC5zY3JvbGxMZWZ0O1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHNjcm9sbFRvKGxlZnQ6IG51bWJlcik6IE9ic2VydmFibGU8dm9pZD4ge1xyXG4gICAgcmV0dXJuIGZyb21Qcm9taXNlKHRoaXMuY21wLnNjcm9sbFRvKHsgbGVmdCB9KSk7XHJcbiAgfVxyXG59XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzdGFuZGFsb25lOiB0cnVlLFxyXG4gIHNlbGVjdG9yOiAnW3Njcm9sbGJhclRyYWNrWV0nLFxyXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogVHJhY2tBZGFwdGVyLCB1c2VFeGlzdGluZzogVHJhY2tZRGlyZWN0aXZlIH1dXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUcmFja1lEaXJlY3RpdmUgZXh0ZW5kcyBUcmFja0FkYXB0ZXIge1xyXG5cclxuICByZWFkb25seSBjc3NMZW5ndGhQcm9wZXJ0eTogc3RyaW5nID0gJy0tdHJhY2steS1sZW5ndGgnO1xyXG5cclxuICByZWFkb25seSBjbGllbnRQcm9wZXJ0eTogc3RyaW5nID0gJ2NsaWVudFknO1xyXG5cclxuICBnZXQgb2Zmc2V0KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jbGllbnRSZWN0LnRvcDtcclxuICB9XHJcblxyXG4gIGdldCBzaXplKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LmNsaWVudEhlaWdodDtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBnZXQgdmlld3BvcnRTY3JvbGxTaXplKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jbXAudmlld3BvcnQuY29udGVudEhlaWdodDtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBnZXQgdmlld3BvcnRWaWV3cG9ydFNpemUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmNtcC52aWV3cG9ydC5vZmZzZXRIZWlnaHQ7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgZ2V0IHZpZXdwb3J0U2Nyb2xsT2Zmc2V0KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jbXAudmlld3BvcnQuc2Nyb2xsVG9wO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHNjcm9sbFRvKHRvcDogbnVtYmVyKTogT2JzZXJ2YWJsZTx2b2lkPiB7XHJcbiAgICByZXR1cm4gZnJvbVByb21pc2UodGhpcy5jbXAuc2Nyb2xsVG8oeyB0b3AgfSkpO1xyXG4gIH1cclxufVxyXG4iXX0=