import { ContentChild, Directive, inject, effect, ElementRef } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { BehaviorSubject, merge, fromEvent, tap, map, expand, delay, switchMap, finalize, takeWhile, takeUntil, distinctUntilChanged, EMPTY } from 'rxjs';
import { NG_SCROLLBAR } from '../utils/scrollbar-base';
import { enableSelection, preventSelection, stopPropagation } from '../utils/common';
import { ThumbAdapter } from '../thumb/thumb-adapter';
import { resizeSensor } from '../viewport';
import * as i0 from "@angular/core";
// @dynamic
export class TrackAdapter {
    get dragged() {
        const mouseDown$ = fromEvent(this.nativeElement, 'pointerdown').pipe(stopPropagation(), preventSelection(this.document));
        const mouseUp$ = fromEvent(this.document, 'pointerup', { passive: true }).pipe(enableSelection(this.document));
        // The reason why we use mousemove instead of mouseover, that we need to save the current mouse location
        const mouseMove$ = fromEvent(this.nativeElement, 'pointermove', { passive: true }).pipe(map((e) => {
            this.currMousePosition = e[this.clientProperty];
            return true;
        }));
        const mouseOut$ = fromEvent(this.nativeElement, 'pointerout', { passive: true }).pipe(map(() => {
            return false;
        }));
        // Stream that combines mousemove and mouseover and only emit when mouse gets in or out the track
        // NOTE: we must use a BehaviorSubject to get the value asap the onTrackFirstClick function is called
        const mouseOverTrack$ = new BehaviorSubject(true);
        return mouseDown$.pipe(switchMap((startEvent) => {
            // We need to subscribe to mousemove and mouseout events before calling the onTrackFirstClick
            // Because we need to tell if mouse is over or not asap the first function is done
            // Otherwise, if user click first time and moved the mouse away immediately, the mouseout will not be detected
            merge(mouseMove$, mouseOut$).pipe(distinctUntilChanged(), tap((over) => mouseOverTrack$.next(over)), takeUntil(mouseUp$)).subscribe();
            // TODO: Verify if this is needed
            // This should stop propagating the move event when pointer is moving over the thumb
            fromEvent(this.thumb.nativeElement, 'pointermove').pipe(stopPropagation(), takeUntil(mouseUp$)).subscribe();
            return this.onTrackFirstClick(startEvent).pipe(switchMap((final) => {
                // If scroll has reached the destination from the first scroll call, end the stream
                if (final) {
                    return EMPTY;
                }
                // Otherwise, activate mousemove and mouseout events and switch to ongoing scroll calls
                return mouseOverTrack$.pipe(switchMap((over) => {
                    const currDirection = this.getScrollDirection();
                    const sameDirection = this.scrollDirection === currDirection;
                    // If mouse is out the track pause the scroll calls, otherwise keep going
                    return (over && sameDirection) ? this.onTrackOngoingMousedown() : EMPTY;
                }), finalize(() => {
                    // Reset the mouseOverTrack$ state
                    mouseOverTrack$.next(true);
                }));
            }), takeUntil(mouseUp$));
        }));
    }
    // Get track client rect
    get clientRect() {
        return this.nativeElement.getBoundingClientRect();
    }
    getScrollDirection() {
        return this.currMousePosition - this.thumb.offset > 0 ? 'forward' : 'backward';
    }
    constructor() {
        this.nativeElement = inject((ElementRef)).nativeElement;
        this.cmp = inject(NG_SCROLLBAR);
        this.document = inject(DOCUMENT);
        effect((onCleanup) => {
            if (this.cmp.disableSensor()) {
                this.updateCSSVariables();
                this.sizeChangeSub?.unsubscribe();
            }
            else {
                this.sizeChangeSub = resizeSensor(this.nativeElement, this.cmp.sensorThrottleTime(), true).pipe(tap(() => this.updateCSSVariables())).subscribe();
            }
            onCleanup(() => this.sizeChangeSub?.unsubscribe());
        });
    }
    updateCSSVariables() {
        this.cmp.nativeElement.style.setProperty(this.cssLengthProperty, `${this.size}`);
    }
    /**
     * Scrolls to position when mouse is down the on the track the first time
     */
    onTrackFirstClick(e) {
        this.currMousePosition = e[this.clientProperty];
        // Save scroll direction
        this.scrollDirection = this.getScrollDirection();
        let value;
        let final;
        // Check which direction should the scroll go (up or down)
        if (this.scrollDirection === 'forward') {
            // Scroll down
            const scrollDownIncrement = this.viewportScrollOffset + this.viewportViewportSize;
            // Check if the incremental position is bigger than the scroll max
            const scrollMax = this.viewportScrollSize - this.viewportViewportSize;
            if (scrollDownIncrement >= scrollMax) {
                value = scrollMax;
                final = true;
            }
            else {
                value = scrollDownIncrement;
            }
        }
        else {
            // Scroll up
            const scrollUpIncrement = this.viewportScrollOffset - this.viewportViewportSize;
            if (scrollUpIncrement <= 0) {
                value = 0;
                final = true;
            }
            else {
                value = scrollUpIncrement;
            }
        }
        return this.scrollTo(value).pipe(delay(200), map(() => final));
    }
    /**
     * Callback that is called when mouse is still down on the track
     */
    onTrackOngoingMousedown() {
        const scrollFinal = this.getRelativePosition();
        let value;
        let final;
        // Check which direction should the scroll go (up or down)
        if (this.scrollDirection === 'forward') {
            // Scroll down
            const scrollDownIncrement = this.viewportScrollOffset + this.viewportViewportSize;
            // Check if the incremental position is bigger than the scroll max
            if (scrollDownIncrement >= scrollFinal) {
                value = scrollFinal;
                final = true;
            }
            else {
                value = scrollDownIncrement;
            }
        }
        else {
            // Scroll up
            const scrollUpIncrement = this.viewportScrollOffset - this.viewportViewportSize;
            if (scrollUpIncrement <= scrollFinal) {
                value = scrollFinal;
                final = true;
            }
            else {
                value = scrollUpIncrement;
            }
        }
        return this.scrollTo(value).pipe(takeWhile(() => !final), expand(() => this.onTrackOngoingMousedown()));
    }
    getRelativePosition() {
        const clickPosition = this.currMousePosition - this.offset;
        const current = clickPosition / this.size;
        return current * (this.viewportScrollSize - this.viewportViewportSize);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: TrackAdapter, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.1", type: TrackAdapter, queries: [{ propertyName: "thumb", first: true, predicate: ThumbAdapter, descendants: true }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: TrackAdapter, decorators: [{
            type: Directive
        }], ctorParameters: () => [], propDecorators: { thumb: [{
                type: ContentChild,
                args: [ThumbAdapter]
            }] } });
//# sourceMappingURL=data:application/json;base64,