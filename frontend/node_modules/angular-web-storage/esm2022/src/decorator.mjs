import { StorageUtil, isBrowser } from './util';
const cache = {};
function WebStorage(storage, key, expiredAt = 0, expiredUnit = 'd') {
    return (target, propertyName) => {
        key = key || propertyName;
        Object.defineProperty(target, propertyName, {
            get: () => {
                return StorageUtil.get(storage, key);
            },
            set: (value) => {
                if (!cache[key]) {
                    const storedValue = StorageUtil.get(storage, key);
                    if (storedValue === null) {
                        StorageUtil.set(storage, key, value, expiredAt, expiredUnit);
                    }
                    cache[key] = true;
                    return;
                }
                StorageUtil.set(storage, key, value, expiredAt, expiredUnit);
            },
            enumerable: true,
            configurable: true,
        });
    };
}
/**
 * `localStorage` Decorator
 *
 * @param [expiredAt=0] Expiration time, 0 means forever
 * @param [expiredUnit='t'] Expiration time unit (default: custom [unit: ms])
 */
export function LocalStorage(key, expiredAt = 0, expiredUnit = 't') {
    return WebStorage(isBrowser ? localStorage : null, key, expiredAt, expiredUnit);
}
/**
 * `sessionStorage` Decorator
 *
 * @param [expiredAt=0] Expiration time, 0 means forever
 * @param [expiredUnit='t'] Expiration time unit (default: custom [unit: ms])
 */
export function SessionStorage(key, expiredAt = 0, expiredUnit = 't') {
    return WebStorage(isBrowser ? sessionStorage : null, key, expiredAt, expiredUnit);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb3JhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3NyYy9kZWNvcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFlLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFN0QsTUFBTSxLQUFLLEdBQStCLEVBQUUsQ0FBQztBQUU3QyxTQUFTLFVBQVUsQ0FDakIsT0FBdUIsRUFDdkIsR0FBWSxFQUNaLFlBQW9CLENBQUMsRUFDckIsY0FBMkIsR0FBRztJQUU5QixPQUFPLENBQUMsTUFBVSxFQUFFLFlBQW9CLEVBQVEsRUFBRTtRQUNoRCxHQUFHLEdBQUcsR0FBRyxJQUFJLFlBQVksQ0FBQztRQUMxQixNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxZQUFZLEVBQUU7WUFDMUMsR0FBRyxFQUFFLEdBQUcsRUFBRTtnQkFDUixPQUFPLFdBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEdBQWEsQ0FBQyxDQUFDO1lBQ2pELENBQUM7WUFDRCxHQUFHLEVBQUUsQ0FBQyxLQUFVLEVBQUUsRUFBRTtnQkFDbEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFhLENBQUMsRUFBRTtvQkFDekIsTUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBYSxDQUFDLENBQUM7b0JBQzVELElBQUksV0FBVyxLQUFLLElBQUksRUFBRTt3QkFDeEIsV0FBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBYSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7cUJBQ3hFO29CQUNELEtBQUssQ0FBQyxHQUFhLENBQUMsR0FBRyxJQUFJLENBQUM7b0JBQzVCLE9BQU87aUJBQ1I7Z0JBQ0QsV0FBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBYSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDekUsQ0FBQztZQUNELFVBQVUsRUFBRSxJQUFJO1lBQ2hCLFlBQVksRUFBRSxJQUFJO1NBQ25CLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxZQUFZLENBQzFCLEdBQVksRUFDWixZQUFvQixDQUFDLEVBQ3JCLGNBQTJCLEdBQUc7SUFFOUIsT0FBTyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQ2xGLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxjQUFjLENBQzVCLEdBQVksRUFDWixZQUFvQixDQUFDLEVBQ3JCLGNBQTJCLEdBQUc7SUFFOUIsT0FBTyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQ3BGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHBpcmVkVW5pdCwgU3RvcmFnZVV0aWwsIGlzQnJvd3NlciB9IGZyb20gJy4vdXRpbCc7XG5cbmNvbnN0IGNhY2hlOiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfSA9IHt9O1xuXG5mdW5jdGlvbiBXZWJTdG9yYWdlKFxuICBzdG9yYWdlOiBTdG9yYWdlIHwgbnVsbCxcbiAga2V5Pzogc3RyaW5nLFxuICBleHBpcmVkQXQ6IG51bWJlciA9IDAsXG4gIGV4cGlyZWRVbml0OiBFeHBpcmVkVW5pdCA9ICdkJyxcbik6ICh0YXJnZXQ6IHt9LCBwcm9wZXJ0eU5hbWU6IHN0cmluZykgPT4gdm9pZCB7XG4gIHJldHVybiAodGFyZ2V0OiB7fSwgcHJvcGVydHlOYW1lOiBzdHJpbmcpOiB2b2lkID0+IHtcbiAgICBrZXkgPSBrZXkgfHwgcHJvcGVydHlOYW1lO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5TmFtZSwge1xuICAgICAgZ2V0OiAoKSA9PiB7XG4gICAgICAgIHJldHVybiBTdG9yYWdlVXRpbC5nZXQoc3RvcmFnZSwga2V5IGFzIHN0cmluZyk7XG4gICAgICB9LFxuICAgICAgc2V0OiAodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICBpZiAoIWNhY2hlW2tleSBhcyBzdHJpbmddKSB7XG4gICAgICAgICAgY29uc3Qgc3RvcmVkVmFsdWUgPSBTdG9yYWdlVXRpbC5nZXQoc3RvcmFnZSwga2V5IGFzIHN0cmluZyk7XG4gICAgICAgICAgaWYgKHN0b3JlZFZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICBTdG9yYWdlVXRpbC5zZXQoc3RvcmFnZSwga2V5IGFzIHN0cmluZywgdmFsdWUsIGV4cGlyZWRBdCwgZXhwaXJlZFVuaXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYWNoZVtrZXkgYXMgc3RyaW5nXSA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFN0b3JhZ2VVdGlsLnNldChzdG9yYWdlLCBrZXkgYXMgc3RyaW5nLCB2YWx1ZSwgZXhwaXJlZEF0LCBleHBpcmVkVW5pdCk7XG4gICAgICB9LFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB9KTtcbiAgfTtcbn1cblxuLyoqXG4gKiBgbG9jYWxTdG9yYWdlYCBEZWNvcmF0b3JcbiAqXG4gKiBAcGFyYW0gW2V4cGlyZWRBdD0wXSBFeHBpcmF0aW9uIHRpbWUsIDAgbWVhbnMgZm9yZXZlclxuICogQHBhcmFtIFtleHBpcmVkVW5pdD0ndCddIEV4cGlyYXRpb24gdGltZSB1bml0IChkZWZhdWx0OiBjdXN0b20gW3VuaXQ6IG1zXSlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIExvY2FsU3RvcmFnZShcbiAga2V5Pzogc3RyaW5nLFxuICBleHBpcmVkQXQ6IG51bWJlciA9IDAsXG4gIGV4cGlyZWRVbml0OiBFeHBpcmVkVW5pdCA9ICd0Jyxcbik6ICh0YXJnZXQ6IHt9LCBwcm9wZXJ0eU5hbWU6IHN0cmluZykgPT4gdm9pZCB7XG4gIHJldHVybiBXZWJTdG9yYWdlKGlzQnJvd3NlciA/IGxvY2FsU3RvcmFnZSA6IG51bGwsIGtleSwgZXhwaXJlZEF0LCBleHBpcmVkVW5pdCk7XG59XG5cbi8qKlxuICogYHNlc3Npb25TdG9yYWdlYCBEZWNvcmF0b3JcbiAqXG4gKiBAcGFyYW0gW2V4cGlyZWRBdD0wXSBFeHBpcmF0aW9uIHRpbWUsIDAgbWVhbnMgZm9yZXZlclxuICogQHBhcmFtIFtleHBpcmVkVW5pdD0ndCddIEV4cGlyYXRpb24gdGltZSB1bml0IChkZWZhdWx0OiBjdXN0b20gW3VuaXQ6IG1zXSlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFNlc3Npb25TdG9yYWdlKFxuICBrZXk/OiBzdHJpbmcsXG4gIGV4cGlyZWRBdDogbnVtYmVyID0gMCxcbiAgZXhwaXJlZFVuaXQ6IEV4cGlyZWRVbml0ID0gJ3QnLFxuKTogKHRhcmdldDoge30sIHByb3BlcnR5TmFtZTogc3RyaW5nKSA9PiB2b2lkIHtcbiAgcmV0dXJuIFdlYlN0b3JhZ2UoaXNCcm93c2VyID8gc2Vzc2lvblN0b3JhZ2UgOiBudWxsLCBrZXksIGV4cGlyZWRBdCwgZXhwaXJlZFVuaXQpO1xufVxuIl19